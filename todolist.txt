
    #KNOWN BUGS

# Bats can fly outside the level and disappear.

# player can end up in a "None" level (and crash game) when leaving a level.
    #this can occur with certain combinations of sprinting/jumping while leaving the level.
    #so far it seems to only happen when leaving the level horizontally while jumping and
        #sprinting through a gap of the same height as the player.
    #it's possible that other bugs may occur if the player does this combination of actions, even when not leaving the level.

# when falling down a large chasm, player can get to the other side of a wall by holding left.
    - may be reproducible in more generalizable situations, like "leaving the level very quickly and diagonally"

    #IMMEDIATE STUFF

#NOTE: see dungeoneditorlauncher.py for dungeon editor-specific TODOs.

# Make docstrings for each class

    remaining classes to docstring:

    being
    camera
    dungeon
    dungeonfactory
    entity
    entityfactory

    (delete entityimage.pyc)

    exitblock
    gameimage
    lantern
    level
    levelfactory
    levelobjects

    (delete levelselectcell.py)

    monster
    platform
    platformfactory
    player

    (delete pygame2exe.py and pythontest.py)

    room
    roomfactory
    spritesheet
    spritestripanimator (I think someone else wrote it)
    tile
    tilefactory

    (some classes are not listed here)
    (Also do this for all LevelEditor classes)

MAIN GOAL: Build a demo showing of dialogs, cutscenes, lighting mechanics, etc. once all immediate stuff is finished.


-------------------------------------------------------------------

IMMEDIATE STUFF: most immediate

# Nothing for now-- go ahead and pick a category

    -------------------------------------------------------------

IMMEDIATE STUFF: screens, menus, movement

# make it possible for the player to open up a map screen.
    - Work with the general design for "screens", "menus", and "controls"

# IDEA to reduce lag: make level blit directly onto a pygame screen and simply change this screen when necessary using the screemanager.
    - Currently, the level blits onto an image which is then blitted onto a main screen, which is twice as much blitting as we really need.

# restructure player (and possibly entity) movement, possibly by using a dict to map situations/input to actions.
    - DEFINITELY draw a flowchart
    - consider making ice blocks (or some other example besides ladders) to test whether this system is really extensible.

# implement one-way platforms, doors, etc
# fix movement/rect related stuff, and put all relevant methods in gameImage, to be called by subclasses.
    # This is partially, maybe completely done, but make sure before removing this TODO.
# fix imports to be efficient/useful

-------------------------------------------------------------

IMMEDIATE STUFF: dialog

# Make NPCS get their dialog data through a more general process
    - will require a lot of planning
        *this is because different actions in the game will affect NPC behavior/dialog later on.
        *need to start really implementing (or planning in detail) the game's main story 
            in order to flesh out the NPC system I'll need
    - IDEA: simple NPCs (which won't appear again) have their dialogs set similarly to signs,
            while main characters have "triggers" linked to text files and other saved data
            which make them appear.

# make portraits prettier (look at cave story, consult people, consider resizing, etc.)

# fix the SIGN arg that I use to determine the image for the dialog pane, or just make it so all dialog panes are the same (which I would prefer not to do)
    - this will change the NPC class, the dialog class (I think), and probaly the dialogchoice one (and maybe some others)

# figure out how to give the existing dialog boxes borders, maybe even make them loaded images instead.
    - could make a nice little "sign" image with a wooden grain
    - figure out what panes should be like for NPCs
    - make it more visually clear that dialogs are waiting for a button input. (maybe a blinking icon?)

# make it more visually clear when the player can press up to interact with something

# consider making Dialogs inherit from GameActions (or events?) instead of Effects, and make the level add/remove effects containing images based on the dialog.
    - not 100% sure about this as it might uneccessarily change existing structrue
    - note that this will affect DialogChoices, which inherit from Dialogs

-------------------------------------------------------------

IMMEDIATE STUFF: cutscenes

# Try to implement some more examples of cutscenes, like two non-player characters with actions and scrolling dialogue.
    - use dialogue from girlchan in paradise as a test. It'll make it more fun.
    - Have Yusuke talking to Kenstar
    - to test something I'll probably use a lot: 
        * have Yusuke start on the screen, but not Kenstar
        * make the cutscene start when the player talks to Yusuke
        * Have the cutscene "create" Kenstar off the left edge of the screen and make him walk on
        * Test different facial expressions in the portraits
        * use other actions from there (don't care as much about these)
        * maybe end with Kenstar leaving and Yusuke staying (you can talk to him, but it doesn't start a new cutscene)
        * alternately, figure out how to keep Kenstar but take away his cutscene trigger.
    - probably use that scene where they're about to fight but spend forever talking instead
        * still have actions mixed with dialogue for testing reasons, though

# Think of a structure that will allow different events to happen at the same time in a cutscene 
    - i.e., entity A starts walking, entity B does something while A is still walking
    - this might work if actions are not ended when new actions start, meaning ending an action is an action in itself.
    - IDEA: different actions that make up a cutscene are linked to "next" actions, which execute when they are over.

# Finish and clean up the frameworks that will handle text, dialogs, events, cutscenes, etc.
    - Remember that some things should be skippable while others should not.
    - Test a number of different cutscene types for testing and implement them using the same general system.

------------------------------------------------------------------------

    #LESS IMMEDIATE STUFF

# implement collectable items of some kind and an inventory screen
    - will require a lot of planning as far as actual game design
# make lanterns run out with distance
    - this means implementing lantern as a held object, making it different that the current system.
    - Need to figure out how the player will interface with "Lantern oil" amounts and how that system will work.
# consider making it so the player does not jump repeatedly if the jump button is held down.
# Make a launcher that makes it possible to select which dungeon to load
    # It may help to change the dungeoneditor to let the user give different dungeons different saved names.
    # A filelist would be useful for this.
# build the enemies extensibly. Make temporary classes/methods if necessary, but plan to replace them later
    # have the bat start hanging from the ceiling and maybe give it "dropping"
        # animation followed by the flying animation
    # change the bat's attack patterns so that it periodically flaps around the player before diving, bounces off, 
        # moves away, and then dives again.
        # (some randomness may make this pattern look more natural)
    # make lighting less laggy for large amounts of light
        # one way might be to only udpate tiles within rectangular areas around light sources.
    # consider possible combat systems (damage, HP, etc)
# reduce lag when player is in a cave 
    -monsters may affect the lag, though it mostly seems to come from the spreadLight method in Tile.
# reduce lag in dungeon editor, particularly for the level editor.
# consider removing level_ID, but first try to think of possible uses for it.
# figure out how to handle monsters in complete/partial darkness
    # I put an idea in Being class
    # Keep in mind that the being may occupy multiple tiles

    # USER SUGGESTIONS

# Add pigs (simon)

---------------------------------------------------------------


    # REDUCING LAG


# IDEA to reduce lag: instead of immediately updating the lightvalues as light is spread by tiles, simply update some "lightmap" (or return it?)
    and somehow apply it to each tile after the entity images have been blitted (this solves a couple other problems, as well)

# IDEA to reduce lag: instead of having the level constantly check for up-interacatbles, simply generate a list stored in levelobjects
when the level is created
    - do this for all the indivdual object types (monsters, platforms, etc) as well.

    #SPRITE STUFF

#TODO: consider having tiles/textures be procedurally generated based on hardcoded platform locations/level data and a library of tiles.
       # Alternately, use the map editor and a tileFactory to load in tiles from images which represent levels using only entities.

    # ENEMY/AI STUFF

#TODO: implement more enemies. Try to give them very different behavior to force myself to expand the AI system.
    # when adding AI, try to be creative and extensible, as though this were a roguelike.
    #IDEA: could give some monsters strong knockback by increasing the bounce they deliver.
# NOTE: enemies remain in the exact same state they were left in when the player leaves a level. should decide if this is good or bad.

    # PLATFORM STUFF

#TODO: make the "platform" system more complex, possibly with inheritance/factory
# consider platforms that  the player can jump up through and/or fall through  by tapping down

    # MISC STUFF

#TODO: make invisible caverns which can be revealed somehow. (test in sunlight first)
#TODO: give exit blocks super terrifying sprites. (they can't be seen normally so it will be a fun surprise if there's a glitch or something)
#TODO: think up lots of cool easter eggs (though this might be more of a long-term thing)