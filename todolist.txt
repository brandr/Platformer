
    #KNOWN BUGS

# the player can fall out of the world and end up in a dark place. No idea how this happens.

# Bats can fly outside the level and disappear.

# This can happen to frogs, too. (though they have to be knocked out of the level)

# player can end up in a "None" level (and crash game) when leaving a level.
    #this can occur with certain combinations of sprinting/jumping while leaving the level.
    #so far it seems to only happen when leaving the level horizontally while jumping and
        #sprinting through a gap of the same height as the player.
    #it's possible that other bugs may occur if the player does this combination of actions, even when not leaving the level.

# when falling down a large chasm, player can get to the other side of a wall by holding left.
    - may be reproducible in more generalizable situations, like "leaving the level very quickly and diagonally"

# NOTE: see dungeoneditorlauncher.py for dungeon editor-specific TODOs.

# Make docstrings for each class
    remaining classes to docstring:

    (go back through non-LevelEditor classes because I haven't been diligent about docstringing)
    (all LevelEditor classes)

-----------------------------------------------------------------------

LONG-TERM GOALS: (short summaries, does not include all TODOs)

# combat
    - more sophisticated collisions/knockback/invincibility frames
    - more sophisticated damage/hp system (probably don't need too much in this area, though)
    - expand use of subentities like more general melee weapons, projectiles, armor plating, weak spots, etc.
# monsters
    - more general mapping to AI
    - look for patterns while developing more AI routines and try to minimize redundancy
    - consider the ability to set varying monster data, based on what monster data turns out to be useful
    - maybe have different sprites/animation sets for the same monster (this might not be worth the effort)
# cutscenes/events
    - consider cutscenes with dialog options, different possible endings, world data checks, etc.
    - currently cutscene building is incomplete is far as building cutscenes with multiple actions 
        * see begin_cutscene in cutsenetrigger.py.
# world and world data (implementing this might be a priority, but it'll be a big project)
    - create the basic world-related classes, flesh out dungeon <-> world relationship
    - saving/loading game
    - world data:
        * will be something stored as an instance when the player saves, but also update as the player goes through the game.
        * includes relatively temporary things like which enemies have been killed and which blocks have been broken, 
          as well as permanent things like "morality" data, which cutscenes have been viewed, which shortcuts have been opened, etc.
# exploration/hidden objects
    - Breakable blocks? Pick/shovel item? "Hidden" tiles that appear as solid block until the player's light strikes them?
    - Need more ideas before I can really start fleshing out exploration system
    - Keep in mind how the map will work
# items/inventory
    - Barely implemented and don't have many ideas.
    - There should probably be an inventory screen.
# screens/menus
    - Make it more clear what each screen is supposed to be and plan out the pause screens/menus after other systems have been implemented.

-------------------------------------------------------------------

OVERARCHING MAIN GOAL: Build a demo showing off dialogs, cutscenes, lighting mechanics, etc. once all immediate stuff is finished.
    - the next demo should include inventory screen and lantern mechanics based on fading light/oil
    - should also include a boss that feels good to fight, maybe world stuff

IMMEDIATE STUFF: most immediate

# implement world stuff
    - currently working on the dungeoneditor side of it
        * change what happens when the DungeonTravelPane is opened so that it grabs the desired information from the loaded LevelData, as it does with bg
        * find where the constructor for LevelSelectCell is called and alter it based on the new system
        * change how levels/dungeon are saved/loaded
        * consider implementing "room offset" (i.e., which room of the corresponding level the player should appear in when traveling between levels)
    - this will significantly change the dungeoneditor and the main files
    - need to create specific (and unique?) linkages between dungeons (assume not unique, just in case)
    - may need multithreading to load dungeons within an acceptable time
    - connections between dungeons will amount to specific sides of specific levels (top, bottom, left, right, etc.)
        * therefore, these should be special attributes that you can set in the level editor
    - will I need a worlddata class?

# perform new tests for rooms and levels once the new dungeon system is implemented.

# In the dungeon editor file manager, when saving a dungeon, update the list of dungeon files.

# for additional sign data, show which index of the pane the user is currently on (ex: "3/5"), and maybe grey out the arrows when there is no pane in a direction.

# make the dungeon editor screen (and/or level editor screen) a good size and adjust the components (this will be an ongoing thing as I add more stuff)

# figure out how to make a more extensible filepath in filemanagercontainer.py's saveDungeon method so that it isn't specific to my computer. 
    - be sure to test the exe maker again if I change the directory structure
    - IDEA: since there won't be many developers, just ask (via terminal?) who is there and use the answer to figure out their directory.

# For the sake of testing the boss fight, add in "getting hurt" animations, swinging animations, jumping animations, etc. for the player and boss to make movement more natural-looking.

# give the player health bar/some other health display to see if bosses can be beaten without taking much damage (possibly without taking any)

# Make a boss

    # NOTE: it still seems to be possible for the miner to occassionally fall outside the level, so look for ways to fix this.

    steps:
        1. Make sure his pick works properly.
            - May want to create "bouncing" or "getting hit" animations for both the player and the miner (can lilly do this thing?)
            - Maybe the miner doesn't bounce? This would make things much easier.
            - consider making the miner's sprite flash red when hit. Not sure how to implement this in a general way, though.
            - NOTE: pick animation offset is currently (33, -13)
        2. The miner is supposed to be fast and aggressive, so experiment with different ways to achieve this.
        3. Attack pattern idea: charge while swinging, turn around in an exaggerrated way (if the player is behind), charge while swinging again
            - figure out how attack pattern will work, and make it interruptible (probably)
        4. have the miner check for a clear path to the player before charging. If there is not a clear path, jump instead of charging.

# make the miner closer to the player in size (Lilly pls)

# make miner portait(s)
    - maybe lilly can do this thing
    - probably not though because it doesn't sound like she felt like it at all

# make the priestess

# make the immortal

# make some actual levels that are cool and fun

# make it easier to add simple NPCs with no actions or branching dialog trees, since most NPCs will work this way. Follow the same pattern as signs
  and make a "default NPC" that can have many different sprites. Note that such NPCs will not have dialog portraits.

# Make a giant frog with an armored mask
    - use the subentity system

# fix the problem where the player bounces up and down on stairs.
    - this may be related to another issue where the player collides with doors wrong.

# TODO: make the "hit spark" better (and possibly more well-adapted to the shape of the thing hit)
    - consider other ways to show that something is being damaged

# show that the player is being damaged (animation)

# fix the bug where the frog (and presumably the bat) can be knocked off the screen

# IDEA: In level editor window, could make a tileset grid image for every tile/entity type and make each cell selectable.
    - At this point, I might do this for platforms, but it curretly doesn't make sense for tiles.

# figure out a combat system 
    - IDEA for hp/other stats: have a double dict of { MONSTER_NAME: { MONSTER DICT }, DEFAULT: { DEFAULT DICT } }
        * implemented this for HP only
    - may have to tweak some of the being/monster bounce system 
        * consider implementing knockback that affects both the monster attacking and the target
    - be extensible
    - use sword as an example
    - later, use gun/bow as example
# consider making the lantern a subentity of the player that appears when the player is in the dark
# figure out an item system
    - remember that the lantern and sword are both items but work very differently

# generalize subentities/entityeffects so that they can apply to monsters and NPCs

# implement "triggers" to traverse between dungeons (similar to cutscene triggers?)
    might not be based on context

# fully implement a cutscene system and ways to trigger cutscenes (besides the existing contact-based triggers)

# make some sprites for the main character, archaeologist, sorceress, and the immortal

# make error checking happen when a dungeon cannot be loaded.
    - partially done, but might not be foolproof.

-------------------------------------------------------------------

IMMEDIATE STUFF: lighting system

# fix the lag caused in the new system
    - currently negligible, but try to make things more efficient anyway.
# consider a special case for lightdist == 1 because right now it looks weird.
# could make it so lighting doesn't snap to tiles, if that looks better
# there is a bug where the player can influence lighting even when not holding a lantern
    * this could possibly be fixed by controlling the angle the player approache the lantern from (i.e., no wall in the way) so that it looks like he is actually casting a shadow, which looks cool

-------------------------------------------------------------------

IMMEDIATE STUFF: screens and menus

# make the map screen more sophisticated. (get feedback)
    - consider how it should be centered (and how to scroll if there is not room for the entire explored area)
    - consider making parts of the map fade with time 
# make more panes to go with the map screen. (these should also be accessible via the pause menu)
    - one possible pane is inventory-- for this, make it possible to get the lantern as an upgrade, and have it contain oil which can be collected to increase light radius.
        * note that this will require some planning (should probably sketch the screen before making it)

----------------------------------------------------------------------

IMMEDIATE STUFF: movement

# come up with more movement examples to expand dict-based movement process
    - consider making ice blocks (or some other example besides ladders) to test whether this system is really extensible.

# implement one-way platforms, spikes, etc
# fix movement/rect related stuff, and put all relevant methods in gameImage, to be called by subclasses.
    # This is partially, maybe completely done, but make sure before removing this TODO

-------------------------------------------------------------

IMMEDIATE STUFF: dialog

# Make complex NPCS get their dialog data through a more general process
    - can sort of use cutscenes as a frame of reference
    - will require a lot of planning
        *this is because different actions in the game will affect NPC behavior/dialog later on.
        *need to start really implementing (or planning in detail) the game's main story 
            in order to flesh out the NPC system I'll need
    - IDEA: simple NPCs (which won't appear in multiple places) have their dialogs set similarly to signs,
            while main characters have "triggers" linked to text files and other saved data
            which make them appear.

# make portraits prettier (look at cave story, consult people, consider resizing, etc.)

# fix the SIGN arg that I use to determine the image for the dialog pane, or just make it so all dialog panes are the same (which I would prefer not to do)
    - this will change the NPC class, the dialog class (I think), and probaly the dialogchoice one (and maybe some others)

# figure out how to give the existing dialog boxes borders, maybe even make them loaded images instead.
    - could make a nice little "sign" image with a wooden grain
    - figure out what panes should be like for NPCs
    - make it more visually clear that dialogs are waiting for a button input. (maybe a blinking icon?)

# make it more visually clear when the player can press X to interact with something (this includes signs, NPCs, doors, and whatever else we make by this point)

# consider making Dialogs inherit from GameActions (or events?) instead of Effects, and make the level add/remove effects containing images based on the dialog.
    - not 100% sure about this as it might uneccessarily change existing structrue
    - note that this will affect DialogChoices, which inherit from Dialogs

-------------------------------------------------------------

IMMEDIATE STUFF: cutscenes

# Make sure cutscene structure will allow allow different events to happen at the same time in a cutscene 
    - i.e., entity A starts walking, entity B does something while A is still walking
    - this might work if actions are not ended when new actions start, meaning ending an action is an action in itself.
    - IDEA: different actions that make up a cutscene are linked to "next" actions, which execute when they are over.

# Finish and clean up the frameworks that will handle text, dialogs, events, cutscenes, etc.
    - Remember that some things should be skippable while others should not.
    - Test a number of different cutscene types for testing and implement them using the same general system.

------------------------------------------------------------------------

    #LESS IMMEDIATE STUFF

# implement collectable items of some kind and an inventory screen
    - will require a lot of planning as far as actual game design
# consider making it so the player does not jump repeatedly if the jump button is held down.
# Make a launcher that makes it possible to select which dungeon to load from the saved list.
# build the enemies extensibly. Make temporary classes/methods if necessary, but plan to replace them later
    - have the bat start hanging from the ceiling and maybe give it "dropping"
      animation followed by the flying animation
    - change the bat's attack patterns so that it periodically flaps around the player before diving, bounces off, 
      moves away, and then dives again.
        * (some randomness may make this pattern look more natural)
# consider possible combat systems (damage, HP, etc)
# consider removing level_ID, but first try to think of possible uses for it.
    - it is likely to come in handy when "world data" is implemented.

    # USER SUGGESTIONS

# Add pigs (simon)
# make a bicycle weapon (simon)

---------------------------------------------------------------

    # REDUCING LAG

# IDEA to reduce lag: instead of having the level constantly check for up-interacatbles, simply generate a list stored in levelobjects
    when the level is created
    - do this for all the indivdual object types (monsters, platforms, etc) as well.

# IDEA: make sure the level only bothers to render the images of onscreen enemies

    #SPRITE STUFF

#TODO: consider having tiles/textures be procedurally generated based on hardcoded platform locations/level data and a library of tiles.
       # Alternately, use the map editor and a tileFactory to load in tiles from images which represent levels using only entities. 
            *(i.e., entities against a white background with variable images.)

    # ENEMY/AI STUFF

#TODO: implement more enemies. Try to give them very different behavior to force myself to expand the AI system.
    # when adding AI, try to be creative and extensible, as though this were a roguelike.
    #IDEA: could give some monsters strong knockback by increasing the bounce they deliver.
# NOTE: enemies remain in the exact same state they were left in when the player leaves a level. should decide if this is good or bad.

    # PLATFORM STUFF

#TODO: make the "platform" system more complex, possibly with inheritance/factory
# consider platforms that  the player can jump up through and/or fall through  by tapping down
# consider platforms that hurt the player when touched
# consider moving platforms (might not fit into the existing tile -> block system, and therefore might not inherit from Platform)

    # MISC STUFF

# fix imports to be efficient/useful
#TODO: make invisible caverns which can be revealed somehow. (test in sunlight first)
#TODO: give exit blocks super terrifying sprites. (they can't be seen normally so it will be a fun surprise if there's a glitch or something)

--------------------------------------------------------------------

    # LONG-TERM STUFF

# figure out the long-term artstyle and change sprites to match
# since being in the dark with no light could make it extremely tedious to get out, make a "suicide" option and ensure that death
    has siginficant pentalties and sends the player back to a save point where they are guaranteed to have access to light
        - want to structure the game partly around this system
# make it possible for the player to save the game
# think up lots of cool easter eggs 
# when actually implementing the game, make sure that at some point the player is forced to go through dark areas with no lantern/empty lantern
    so that they know what it's like.   